{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\FoodApp\\\\FoodApp2\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from \"react\";\nimport CartContext from \"./cart-context\"; //Przyklad uzycia Reducera\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet defaultCartState;\nconst storedCart = localStorage.getItem(\"cart\");\n\nif (storedCart) {\n  const storedCartParsed = JSON.parse(storedCart);\n  const items = storedCartParsed.items;\n  const totalAmount = +storedCartParsed.totalAmount;\n  defaultCartState = {\n    items,\n    totalAmount\n  };\n} else {\n  defaultCartState = {\n    items: [],\n    totalAmount: 0\n  };\n}\n\nlet init = true;\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //funkcja findIndex sprawdza dla kazdego elementu tablicy czy id elementu w tablicy jest takie samo jak id z akcji. jezeli napotka taki item to zwraca indeks\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n\n    if (existingCartItem) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItem = { ...action.item\n      };\n      updatedItems = state.items.concat(updatedItem);\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItems;\n\n    if (existingCartItem.amount > 1) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = [...state.items];\n      updatedItems.splice(existingCartItemIndex, 1);\n    }\n\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: \"CLEAR\"\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  };\n  useEffect(() => {\n    if (init) {\n      init = false;\n      return;\n    }\n\n    localStorage.setItem(\"cart\", JSON.stringify(cartState));\n    console.log(\"Local storage updated!\");\n  }, [cartState]);\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"XkNqNDg/8i/7FLMxGOLtIsosn6E=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/user/Desktop/React/FoodApp/FoodApp2/src/store/CartProvider.js"],"names":["useReducer","useEffect","CartContext","defaultCartState","storedCart","localStorage","getItem","storedCartParsed","JSON","parse","items","totalAmount","init","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItem","updatedItems","amount","concat","updatedTotalAmount","price","splice","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","setItem","stringify","console","log","children"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n//Przyklad uzycia Reducera\r\n\r\nlet defaultCartState;\r\n\r\nconst storedCart = localStorage.getItem(\"cart\");\r\nif (storedCart) {\r\n  const storedCartParsed = JSON.parse(storedCart);\r\n  const items = storedCartParsed.items;\r\n  const totalAmount = +storedCartParsed.totalAmount;\r\n\r\n  defaultCartState = { items, totalAmount };\r\n} else {\r\n  defaultCartState = { items: [], totalAmount: 0 };\r\n}\r\n\r\nlet init = true;\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    //funkcja findIndex sprawdza dla kazdego elementu tablicy czy id elementu w tablicy jest takie samo jak id z akcji. jezeli napotka taki item to zwraca indeks\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItem;\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItem = { ...action.item };\r\n      updatedItems = state.items.concat(updatedItem);\r\n    }\r\n\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"REMOVE\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n    let updatedItem;\r\n    let updatedItems;\r\n\r\n    if (existingCartItem.amount > 1) {\r\n      updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount - 1,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = [...state.items];\r\n      updatedItems.splice(existingCartItemIndex, 1);\r\n    }\r\n\r\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"CLEAR\") {\r\n    return defaultCartState;\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const clearCartHandler = () => {\r\n    dispatchCartAction({ type: \"CLEAR\" });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (init) {\r\n      init = false;\r\n      return;\r\n    }\r\n\r\n    localStorage.setItem(\"cart\", JSON.stringify(cartState));\r\n    console.log(\"Local storage updated!\");\r\n  }, [cartState]);\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}