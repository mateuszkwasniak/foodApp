{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\FoodApp\\\\FoodApp\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Card from \"../UI/Cards\";\nimport MealItem from \"./MealItem/MealItem\";\nimport classes from \"./AvailableMeals.module.css\"; //Zamieniamy dummy tablice na dance przechowane w Firebase\n// const DUMMY_MEALS = [\n//   {\n//     id: \"m1\",\n//     name: \"Sushi\",\n//     description: \"Ryba najwyższej jakości\",\n//     price: 22.99,\n//   },\n//   {\n//     id: \"m2\",\n//     name: \"Schnitzel\",\n//     description: \"Niemiecki specjał\",\n//     price: 16.5,\n//   },\n//   {\n//     id: \"m3\",\n//     name: \"Burger Barbecue\",\n//     description: \"Wołowy burger z sosem BBQ\",\n//     price: 12.99,\n//   },\n//   {\n//     id: \"m4\",\n//     name: \"Zielona miska\",\n//     description: \"Świeże warzywa - samo zdrowie\",\n//     price: 18.99,\n//   },\n// ];\n//nie powinnismy uzywac funkcji asynchronicznej jako argumentu useEffect (zwracamy cleanup function, ktora musi byc synchroniczna a nie jak to robia funkcje async zwracac Promise), zamiast tego tworzymy asynchroniczna funkcje wewnatrz tej funckji i ja wywolujemy linijke nizej\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(); //poczatkowo nie mamy zadnych danych, po sciagnieciu ich przy uzyciu useEffect musimy przeladowac nasz komponent - zatem potrzebujemy statu, aby przekazac sciagniete dane i przeladowac komponent...\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch(\"https://test1-76ad3-default-rtdb.firebaseio.com/meals.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Coś poszło nie tak...\");\n      }\n\n      const responseData = await response.json(); // Firebase zwraca nam obiekt meals -> a my chcemy tablice:\n\n      const loadedMeals = []; //przechodzimy przez wszystkie klucze obiektu meals (m1, m2, m3, m4) i wstawiamy znajdujace sie pod nimi wartosci (wlasciwie obiekty dań) poprzez odwolanie sie do meals[m1], meals[m2] itd. do tablicy loadedMeals.\n\n      for (key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.MealsLoading,\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"chy+z93bVi3JZz5FlGXJuBdLSnY=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/user/Desktop/React/FoodApp/FoodApp/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","error","setError","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","catch","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Card from \"../UI/Cards\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nimport classes from \"./AvailableMeals.module.css\";\r\n//Zamieniamy dummy tablice na dance przechowane w Firebase\r\n// const DUMMY_MEALS = [\r\n//   {\r\n//     id: \"m1\",\r\n//     name: \"Sushi\",\r\n//     description: \"Ryba najwyższej jakości\",\r\n//     price: 22.99,\r\n//   },\r\n//   {\r\n//     id: \"m2\",\r\n//     name: \"Schnitzel\",\r\n//     description: \"Niemiecki specjał\",\r\n//     price: 16.5,\r\n//   },\r\n//   {\r\n//     id: \"m3\",\r\n//     name: \"Burger Barbecue\",\r\n//     description: \"Wołowy burger z sosem BBQ\",\r\n//     price: 12.99,\r\n//   },\r\n//   {\r\n//     id: \"m4\",\r\n//     name: \"Zielona miska\",\r\n//     description: \"Świeże warzywa - samo zdrowie\",\r\n//     price: 18.99,\r\n//   },\r\n// ];\r\n\r\n//nie powinnismy uzywac funkcji asynchronicznej jako argumentu useEffect (zwracamy cleanup function, ktora musi byc synchroniczna a nie jak to robia funkcje async zwracac Promise), zamiast tego tworzymy asynchroniczna funkcje wewnatrz tej funckji i ja wywolujemy linijke nizej\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  //poczatkowo nie mamy zadnych danych, po sciagnieciu ich przy uzyciu useEffect musimy przeladowac nasz komponent - zatem potrzebujemy statu, aby przekazac sciagniete dane i przeladowac komponent...\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      const response = await fetch(\r\n        \"https://test1-76ad3-default-rtdb.firebaseio.com/meals.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Coś poszło nie tak...\");\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      // Firebase zwraca nam obiekt meals -> a my chcemy tablice:\r\n      const loadedMeals = [];\r\n      //przechodzimy przez wszystkie klucze obiektu meals (m1, m2, m3, m4) i wstawiamy znajdujace sie pod nimi wartosci (wlasciwie obiekty dań) poprzez odwolanie sie do meals[m1], meals[m2] itd. do tablicy loadedMeals.\r\n      for (key in responseData) {\r\n        loadedMeals.push({\r\n          id: key,\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchMeals().catch((error) => {\r\n      setIsLoading(false);\r\n      setError(error.message);\r\n    });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section>\r\n        <p className={classes.MealsLoading}>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{error}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      id={meal.id}\r\n      key={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}