{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\FoodApp\\\\FoodApp\\\\src\\\\components\\\\Layout\\\\HeaderCartButton.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport React from \"react\";\nimport CartIcon from \"../Cart/CartIcon\";\nimport CartContext from \"../../store/cart-context\";\nimport classes from \"./HeaderCartButton.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeaderCartButton = props => {\n  _s();\n\n  //przez to ze uzywamy kontekstu, caly nasz komponent HeaderCartButton bedzie \"re-evaluated\" przez React za kazdym razem gdy kontekst ulegnie zmianie (czyli gdy ulegnie zmianie w CartProvider.js bo tam mamy state)\n  const cartCtx = useContext(CartContext); //uzywamy .reduce zeby obliczyc ilosc produktow w koszyku -> przechowujemy jeden typ np. \"sushi\" i w property amount ilosc tego produktu, stad:\n\n  const numberOfCartItems = cartCtx.items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0); //przyklad wykorzystania useEffect aby dodac animacje do guzika\n\n  const btnClasses = `${classes.button} ${classes.bump}`;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: btnClasses,\n    onClick: props.onClick,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.icon,\n      children: /*#__PURE__*/_jsxDEV(CartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Tw\\xF3j koszyk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.badge,\n      children: numberOfCartItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HeaderCartButton, \"5vyuBAd9ctzs1tCKQUMcCu/LGtk=\");\n\n_c = HeaderCartButton;\nexport default HeaderCartButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderCartButton\");","map":{"version":3,"sources":["C:/Users/user/Desktop/React/FoodApp/FoodApp/src/components/Layout/HeaderCartButton.js"],"names":["useContext","useEffect","React","CartIcon","CartContext","classes","HeaderCartButton","props","cartCtx","numberOfCartItems","items","reduce","curNumber","item","amount","btnClasses","button","bump","onClick","icon","badge"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAOC,OAAP,MAAoB,+BAApB;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC;AACA,QAAMC,OAAO,GAAGR,UAAU,CAACI,WAAD,CAA1B,CAFkC,CAIlC;;AACA,QAAMK,iBAAiB,GAAGD,OAAO,CAACE,KAAR,CAAcC,MAAd,CAAqB,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAClE,WAAOD,SAAS,GAAGC,IAAI,CAACC,MAAxB;AACD,GAFyB,EAEvB,CAFuB,CAA1B,CALkC,CASlC;;AACA,QAAMC,UAAU,GAAI,GAAEV,OAAO,CAACW,MAAO,IAAGX,OAAO,CAACY,IAAK,EAArD;AAEA,sBACE;AAAQ,IAAA,SAAS,EAAEF,UAAnB;AAA+B,IAAA,OAAO,EAAER,KAAK,CAACW,OAA9C;AAAA,4BACE;AAAM,MAAA,SAAS,EAAEb,OAAO,CAACc,IAAzB;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAM,MAAA,SAAS,EAAEd,OAAO,CAACe,KAAzB;AAAA,gBAAiCX;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArBD;;GAAMH,gB;;KAAAA,gB;AAuBN,eAAeA,gBAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\r\n\r\nimport React from \"react\";\r\nimport CartIcon from \"../Cart/CartIcon\";\r\nimport CartContext from \"../../store/cart-context\";\r\n\r\nimport classes from \"./HeaderCartButton.module.css\";\r\n\r\nconst HeaderCartButton = (props) => {\r\n  //przez to ze uzywamy kontekstu, caly nasz komponent HeaderCartButton bedzie \"re-evaluated\" przez React za kazdym razem gdy kontekst ulegnie zmianie (czyli gdy ulegnie zmianie w CartProvider.js bo tam mamy state)\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  //uzywamy .reduce zeby obliczyc ilosc produktow w koszyku -> przechowujemy jeden typ np. \"sushi\" i w property amount ilosc tego produktu, stad:\r\n  const numberOfCartItems = cartCtx.items.reduce((curNumber, item) => {\r\n    return curNumber + item.amount;\r\n  }, 0);\r\n\r\n  //przyklad wykorzystania useEffect aby dodac animacje do guzika\r\n  const btnClasses = `${classes.button} ${classes.bump}`;\r\n\r\n  return (\r\n    <button className={btnClasses} onClick={props.onClick}>\r\n      <span className={classes.icon}>\r\n        <CartIcon />\r\n      </span>\r\n      <span>Tw√≥j koszyk</span>\r\n      <span className={classes.badge}>{numberOfCartItems}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default HeaderCartButton;\r\n"]},"metadata":{},"sourceType":"module"}