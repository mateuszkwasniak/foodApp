{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React\\\\FoodApp\\\\FoodApp2\\\\src\\\\components\\\\Meals\\\\MealItem\\\\MealItemForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport Input from \"../../UI/Input\";\nimport classes from \"./MealItemForm.module.css\"; //Komponent z przykladem uzycia useRef();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MealItemForm = props => {\n  _s();\n\n  const [amountIsValid, setAmountValidity] = useState(true);\n  const amountInputRef = useRef();\n\n  const submitHandler = event => {\n    event.preventDefault(); //uzywamy refow zeby dostac sie do <input>. .value jest zawsze stringiem\n\n    const enteredAmount = amountInputRef.current.value;\n    const enteredAmountNumber = +enteredAmount;\n\n    if (enteredAmount.trim().length === 0 || enteredAmountNumber < 1 || enteredAmountNumber > 5) {\n      setAmountValidity(false);\n      return;\n    } //jako ze jestesmy w formie nie mamy pelnego dostepu do rodzaju zamawianego produktu a jedynie do jego ilosci. wywolujemy zatem metode ktora przekazuje tylko ilosc, a nie metode dodawania do koszyka calego produktu za pomoca metody z kontekstu\n\n\n    props.onAddToCart(enteredAmountNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      ref: amountInputRef,\n      label: \"Ilo\\u015B\\u0107\",\n      input: {\n        id: \"amount\" + props.id,\n        type: \"number\",\n        // min: \"1\",\n        // max: \"5\",\n        step: \"1\",\n        defaultValue: \"1\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"+ Dodaj\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), !amountIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Prosz\\u0119 wprowadzi\\u0107 poprawn\\u0105 ilo\\u015B\\u0107 (1-5)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MealItemForm, \"JCpL1FitO5v30fBQuAxvgZgarYQ=\");\n\n_c = MealItemForm;\nexport default MealItemForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MealItemForm\");","map":{"version":3,"sources":["C:/Users/user/Desktop/React/FoodApp/FoodApp2/src/components/Meals/MealItem/MealItemForm.js"],"names":["useRef","useState","Input","classes","MealItemForm","props","amountIsValid","setAmountValidity","amountInputRef","submitHandler","event","preventDefault","enteredAmount","current","value","enteredAmountNumber","trim","length","onAddToCart","form","id","type","step","defaultValue"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;;;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,aAAD,EAAgBC,iBAAhB,IAAqCN,QAAQ,CAAC,IAAD,CAAnD;AACA,QAAMO,cAAc,GAAGR,MAAM,EAA7B;;AAEA,QAAMS,aAAa,GAAIC,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN,GAD+B,CAE/B;;AACA,UAAMC,aAAa,GAAGJ,cAAc,CAACK,OAAf,CAAuBC,KAA7C;AACA,UAAMC,mBAAmB,GAAG,CAACH,aAA7B;;AACA,QACEA,aAAa,CAACI,IAAd,GAAqBC,MAArB,KAAgC,CAAhC,IACAF,mBAAmB,GAAG,CADtB,IAEAA,mBAAmB,GAAG,CAHxB,EAIE;AACAR,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA;AACD,KAZ8B,CAa/B;;;AACAF,IAAAA,KAAK,CAACa,WAAN,CAAkBH,mBAAlB;AACD,GAfD;;AAgBA,sBACE;AAAM,IAAA,SAAS,EAAEZ,OAAO,CAACgB,IAAzB;AAA+B,IAAA,QAAQ,EAAEV,aAAzC;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,GAAG,EAAED,cADP;AAEE,MAAA,KAAK,EAAC,iBAFR;AAGE,MAAA,KAAK,EAAE;AACLY,QAAAA,EAAE,EAAE,WAAWf,KAAK,CAACe,EADhB;AAELC,QAAAA,IAAI,EAAE,QAFD;AAGL;AACA;AACAC,QAAAA,IAAI,EAAE,GALD;AAMLC,QAAAA,YAAY,EAAE;AANT;AAHT;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,EAcG,CAACjB,aAAD,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdrB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAtCD;;GAAMF,Y;;KAAAA,Y;AAwCN,eAAeA,YAAf","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport Input from \"../../UI/Input\";\r\nimport classes from \"./MealItemForm.module.css\";\r\n\r\n//Komponent z przykladem uzycia useRef();\r\nconst MealItemForm = (props) => {\r\n  const [amountIsValid, setAmountValidity] = useState(true);\r\n  const amountInputRef = useRef();\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    //uzywamy refow zeby dostac sie do <input>. .value jest zawsze stringiem\r\n    const enteredAmount = amountInputRef.current.value;\r\n    const enteredAmountNumber = +enteredAmount;\r\n    if (\r\n      enteredAmount.trim().length === 0 ||\r\n      enteredAmountNumber < 1 ||\r\n      enteredAmountNumber > 5\r\n    ) {\r\n      setAmountValidity(false);\r\n      return;\r\n    }\r\n    //jako ze jestesmy w formie nie mamy pelnego dostepu do rodzaju zamawianego produktu a jedynie do jego ilosci. wywolujemy zatem metode ktora przekazuje tylko ilosc, a nie metode dodawania do koszyka calego produktu za pomoca metody z kontekstu\r\n    props.onAddToCart(enteredAmountNumber);\r\n  };\r\n  return (\r\n    <form className={classes.form} onSubmit={submitHandler}>\r\n      <Input\r\n        ref={amountInputRef}\r\n        label=\"Ilość\"\r\n        input={{\r\n          id: \"amount\" + props.id,\r\n          type: \"number\",\r\n          // min: \"1\",\r\n          // max: \"5\",\r\n          step: \"1\",\r\n          defaultValue: \"1\",\r\n        }}\r\n      />\r\n      <button>+ Dodaj</button>\r\n      {!amountIsValid && <p>Proszę wprowadzić poprawną ilość (1-5)</p>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MealItemForm;\r\n"]},"metadata":{},"sourceType":"module"}